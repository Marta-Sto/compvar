% Script for source projection and source parcellation using the
% Brainnetome Atlas. Takes the participant files as input, reads data for
% each subject, and then returns parcellated source projected data.

clc
clear
close all

%% set up directories and paths

% add Fieldtrip path
% fieldtrip_dir = 'Volumes/LNDG/Projects/HCP/fieldtrip-20220104'; % server
% fieldtrip_dir = '/Users/waschke/Documents/Toolboxes/fieldtrip-20220104';
fieldtrip_dir = '/Users/stojanovic/Documents/Projects/MaxPlanck/Toolboxes/fieldtrip-20220104'; % Marta's local path
addpath(fieldtrip_dir)
ft_defaults

% also add megconnectome functions
addpath(genpath('/Volumes/LNDG/Projects/HCP/megconnectome-master/'));

rootdir = '/Volumes/LNDG/Projects/HCP/';
% get filesep depending on OS
ff = filesep;
megdir = [rootdir 'MEG' ff];
subs_avail = dir(megdir);
% as so often, dir will  also report on some not really present files.
% -->Always important to check subs_avail before looping through names.
% Example participant:
exmpl_sub = subs_avail(7).name;
datdir = [megdir exmpl_sub ff];

% load some resting state MEG data, eyes open (4 & 5 are the following scans)
fname = dir([datdir ff 'Rest*' ff 'rmeg*' ff exmpl_sub '*MEG_3' '*.mat']);
fname_loaded = load([fname.folder ff fname.name])

% get transformation matrx for given subject
t_matrix = hcp_read_ascii([datdir 'anatomy' ff exmpl_sub '_MEG_anatomy_transform.txt'])
T = t_matrix.transform.bti2spm;

% also get empty room recording for pre-whitening
% right now, this is not provided with MEG data in a usable format.
% My hunch is that this has been taken out already, but let's make sure and
% check. - added below now!

% load headmodel, convert to milimiters (maybe useful later)
headmod = dir([datdir 'an*' ff exmpl_sub '*headmodel.mat']);
tmp = load([headmod.folder  ff headmod.name]);
hm = tmp.headmodel;
hm = ft_convert_units(hm, 'mm');

% load source model
smod = dir([datdir 'an*' ff exmpl_sub '*source*' '3d8*' '.mat']);
tmp = load([smod.folder  ff smod.name]);
sm = tmp.sourcemodel3d;
sm = ft_convert_units(sm, 'mm');

%% filter
% note that we probably would not do this for task data and certianly would
% use a different filter for any event-related design. Here, this might be
% fine.
cfg = [];
cfg.bpfilter = 'yes';
cfg.bpfreq = [1 80];
data = ft_preprocessing(cfg, data);

%% get covariance
cfg = [];
cfg.preproc.demean = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
tlck = ft_timelockanalysis(cfg, data);

%% visualise the covariance matrix 
% both of these are actually empty logical arrays
selmag  = ft_chantype(tlck.label, 'megmag');
selgrad = ft_chantype(tlck.label, 'megplanar');

% doesn't currently return a figure
C = tlck.cov([find(selmag);find(selgrad)],[find(selmag);find(selgrad)]);
figure;imagesc(C);hold on;plot(102.5.*[1 1],[0 306],'w','linewidth',2);plot([0 306],102.5.*[1 1],'w','linewidth',2);

% check the singular values of the covariance matrix
% plots the data on a log scale

[u,s,v] = svd(tlck.cov);
figure;plot(log10(diag(s)),'o');

%% detect the location of the first large 'cliff'
% currently also still empty because selmag and selgrad are empty
[u,s_mag,v]  = svd(tlck.cov(selmag, selmag));
[u,s_grad,v] = svd(tlck.cov(selgrad, selgrad));
d_mag = -diff(log10(diag(s_mag))); d_mag = d_mag./std(d_mag);
kappa_mag = find(d_mag>4,1,'first');
d_grad = -diff(log10(diag(s_grad))); d_grad = d_grad./std(d_grad);
kappa_grad = find(d_grad>4,1,'first');

%% denoise and prewhiten data
cfg            = [];
cfg.channel    = 'meg';
cfg.kappa      = min(kappa_mag,kappa_grad);
dataw_meg      = ft_denoise_prewhiten(cfg, data, tlck);

% check through trials and exclude outlier trials
cfg        = [];
cfg.layout = 'neuromag306mag_helmet.mat';
layout     = ft_prepare_layout(cfg);

% the input here is raw data with 242 channels and 140 trials, based on the
% denoised and prewhitened data.
cfg        = [];
cfg.method = 'summary';
cfg.layout = layout;
dataw_meg  = ft_rejectvisual(cfg, dataw_meg);

%% generate leadfield
cfg             = [];
cfg.channel     = tlck.label;
cfg.grad        = tlck.grad;
cfg.normalizeparam = 1;
cfg.sourcemodel = sm;
cfg.headmodel   = hm;
cfg.reducerank = 2;
cfg.normalize = 'yes';
lf_meg   = ft_prepare_leadfield(cfg);

% check based on prewhitened data
cfg             = [];
cfg.channel     = tlckw.label;
cfg.grad        = tlckw.grad;
cfg.sourcemodel = sm;
cfg.headmodel   = hm;
cfg.method      = 'singleshell';
cfg.singleshell.batchsize = 1000;
leadfield_meg   = ft_prepare_leadfield(cfg);

%% check leadfield
selchan = match_str(data.grad.label, lf_meg.label);
% selpos = find(leadfield.inside, 1, 'first');
selpos = find(lf_meg.inside, 1, 'last');
figure
subplot(1,3,1); ft_plot_topo3d(data.grad.chanpos(selchan,:), lf_meg.leadfield{selpos}(:,1));
subplot(1,3,2); ft_plot_topo3d(data.grad.chanpos(selchan,:), lf_meg.leadfield{selpos}(:,2));
subplot(1,3,3); ft_plot_topo3d(data.grad.chanpos(selchan,:), lf_meg.leadfield{selpos}(:,3));

% check based on prewhitened data
selchan = match_str(data.grad.label, leadfield_meg.label);
% selpos = find(leadfield.inside, 1, 'first');
selpos = find(leadfield_meg.inside, 1, 'last');
figure
subplot(1,3,1); ft_plot_topo3d(data.grad.chanpos(selchan,:), leadfield_meg.leadfield{selpos}(:,1));
subplot(1,3,2); ft_plot_topo3d(data.grad.chanpos(selchan,:), leadfield_meg.leadfield{selpos}(:,2));
subplot(1,3,3); ft_plot_topo3d(data.grad.chanpos(selchan,:), leadfield_meg.leadfield{selpos}(:,3));

%% get reg kappa and run beamformer (LCMV)
[u,s,v] = svd(tlck.cov);
d       = -diff(log10(diag(s)));
d       = d./std(d);

kappa   = find(d>5,1,'first'); % kappa refers to the number of spatial components 
                               % to be retained in the inverse solution
cfg                 = [];
cfg.lcmv.lambda = '5%'; % linearly constrained minimum variance beamforming
                        % lambda is used to regularize the covariance
                        % matrix
cfg.lcmv.kappa = kappa;
cfg.method          = 'lcmv';
cfg.lcmv.keepfilter = 'yes';
cfg.lcmv.fixedori   = 'yes';
cfg.lcmv.weightnorm = 'nai';
cfg.headmodel   = hm;
cfg.sourcemodel = lf_meg;
source          = ft_sourceanalysis(cfg, tlck);

%% surface
% combine R and L hemispheres of template
if exist('template_surface_inflated.mat')
else
    fname = '/Volumes/LNDG/Projects/HCP/megconnectome-master/template/Conte69.L.midthickness.4k_fs_LR.surf.gii';
    inflated = ft_read_headshape({fname strrep(fname, '.L.', '.R.')});
    save('template_surface_inflated.mat', 'inflated')
end

%% project single trials
% Build empty structure for source data
clear SourceTrialData
SourceTrialData.trial = cell(1, length(data.trial));
SourceTrialData.label = cell(1,1);
SourceTrialData.trialinfo = data.trialinfo;
SourceTrialData.fsample = data.fsample;
SourceTrialData.time = data.time;
NTrials = length(data.trial);

% Get trafo-matrix
InVox=source.inside;
TrafoMatrix = permute(squeeze(cat(3,source.avg.filter{InVox})),[ 2 1]);

% get labels right
SourceTrialData.label = [];
for vx=1:length(find(InVox==1))
    SourceTrialData.label{vx,1} = strcat('VirtCH', num2str(vx));
end

% source-project single trials
for tr = 1:NTrials
    display(['Projecting trial ' num2str(tr)])
    SourceTrialData.trial{tr}(:,:) = TrafoMatrix(:,:)*data.trial{tr};
end

%% save projected data

if ~exist([datdir 'Source' ff])
    mkdir([datdir 'Source' ff])
end
% while the below way is better, the -V7.3 takes a very long time, so I
% switched to 'save'.
% save([datdir 'Source' ff 'CompVar_source_trials_folcmv_sub_' exmpl_sub], 'SourceTrialData',...
        %'-V7.3')

filename = fullfile(datdir, 'Source',  sprintf('%s_source_lcmv', exmpl_sub));
save(filename, 'source', 'tlckw');

% also save / source as dummy source
save([datdir 'Source' ff 'CompVar_dummy_source_folcmv_sub_' exmpl_sub], 'source') 

%% inspect source file 
source.avg 
source.avg.mom % contains the time courses of the event-related field at the source level
% colloquially known as virtual channels
source.avg.pow % the ‘pow’ field is a scalar per dipole position, reflects the variance over the time window of interest
               % and typically does not mean much
               
%% as a quick check: get alpha power
cfg = [];
cfg.method = 'mtmfft';
cfg.taper = 'hanning';
%cfg.toi    = 0:5:2;
cfg.foi    = 8:1:12;
%cfg.t_ftimwin = 4./cfg.foi;
cfg.output = 'pow';
cfg.tapsmofrq = 2;
cfg.keeptrials = 'yes';
cfg.pad = 'nextpow2';
trlwise_pow= ft_freqanalysis(cfg,SourceTrialData);

% average
cfg = [];
cfg.frequency = [8,12];
cfg.avgoverfreq = 'yes';
cfg.avgoverrpt = 'yes';
alpha_dat = ft_selectdata(cfg, trlwise_pow);
%% fix coordinate system, interpolate and normalize

indf_dir = dir([datdir 'a*/T1w*']);
ind_mri = ft_read_mri([indf_dir.folder ff indf_dir.name]);
template_mri = ft_read_mri('/Volumes/LNDG/Projects/HCP/megconnectome-master/template/mni_icbm152_t1_tal_nlin_sym_09a.nii');
clear dummy_source
activation = alpha_dat.powspctrm;
dummy_source=source;
dummy_source.avg.pow(dummy_source.inside)=activation;
dummy_source.time= 0;

% Before we interpolate source-projected data with the template,
% we'll need to transform the corrdinates real quick.
dummy_source = ft_transform_geometry(T, dummy_source);

% interpolate sources
cfg = [];
cfg.parameter = 'all';
source_intp = ft_sourceinterpolate(cfg, dummy_source, ind_mri);
source_intp.coordsys = 'mni';

% normalize
cfg = [];
cfg.template = '/Volumes/LNDG/Projects/HCP/megconnectome-master/template/mni_icbm152_t1_tal_nlin_sym_09a.nii';
cfg.templatecoordsys = 'mni';
source_intp = ft_volumenormalise(cfg, source_intp);

%% plotting
% Note that surface plots (which is what one would really want) only seem
% to work on source projected and alingned data that is still in long
% format. Thus, fields such as .pow or .inside have to be of shape N*1, not
% x*y*z. Unfortunately, volumne normalization leads to the latter.

% change things by hand:
n_lgth = size(source_intp.inside,1)*size(source_intp.inside,2)*...
    size(source_intp.inside,3);
source_f_surf = source_intp;
source_f_surf.inside = reshape(source_intp.inside,[n_lgth,1]);
source_f_surf.pow = reshape(source_intp.pow,[n_lgth,1]);
source_f_surf.eta = reshape(source_intp.eta,[n_lgth,1]);
%source_f_surf.pos = reshape(source_intp.pos,[n_lgth,1]);
source_f_surf = rmfield(source_f_surf, 'coordsys');

cfg              = [];
cfg.method       = 'surface';
cfg.funparameter = 'pow';

% %cfg.funcolormap    = cmap;
% np =1;
% if np == 1; %negative clusters
%     cfg.opacitymap = 'rampdown';
% end
% if np == 2 %positive clusters
%     cfg.opacitymap = 'rampup';
% end

cfg.projmethod     = 'project';
cfg.renderer='opengl';
cfg.sphereradius = 1;
cfg.maskparameter  = cfg.funparameter;
cfg.surfdownsample = 10;
%cfg.funcolorlim   = [0 max(abs(source_intp.pow))];
cfg.camlight='yes';
cfg.surffile = 'template_surface_inflated.mat';
cfg.interactive = 'yes';

% view from left
ft_sourceplot(cfg,source_f_surf);

% source plot only seems to work in surface mode once one uses the template
% mri, not the individual one for interpolation. However, if one uses the
% any template mri, things get interpolated completely wrong and there is no
% activity at all in parietal or occipital areas.
% Same with the T1 template from the megconnectome toolbox - that just
% appears even blurrier in addition.
%% plot  slices
% note that wee can get very decent results if we
% (1) interpolate source activity estimates onto individual mri before
% (2) normalize the results of (1) with the template mri
% without these steps, single subject brains will not fit properly into the
% template. This is unexpected since HCP MEG data are supposed to come
% with coordinates that directly map onto MNI space. Hence, a simple
% transform into MNI space should be enough, no volume normalization should
% be needed after source projection.
cfg = [];
cfg.funparameter = 'pow'; % or 'pow'
cfg.anaparameter = 'anatomy';
ft_sourceplot(cfg, source_f_surf);

%% Align real trial-wise time courses
% Alpha power just acts as a quick check. Actually, we want to analyze the
% time courses of activity. Hence, we'll have to align and transfrom these
% as well.
% Note that this could also be done at a later stage in case it is faster /
% more convenient then. Results will not differ as long as trasnformationm
% interpolation, and normalization is done before plotting.

%% Check FOOF things
% Since very recently, Fieldtrip offers some FOOOF implementation, unlcear
% what that exactly spits out, though.
% OK - single trials are not possible within the fieldtrip version of
% FOOOF.
% --> get spectra by hand and run FOOOF in python.
freqs = [1:.25:80];
fs = SourceTrialData.fsample;

% Usually, one would append trials but this will create problems due to the
% number of virtual channels in this dataset.
% Hence, wel'll have to loop across trials
allps_sand = NaN(size(SourceTrialData.trial,2), size(SourceTrialData.label,1),...
    size(freqs,2));
for itr = 1:size(SourceTrialData.trial,2)
    or_dat=((SourceTrialData.trial{itr}))';
    sand_dat = [flipud(or_dat); or_dat; flipud(or_dat)];
    [p, wf] = pwelch(((sand_dat) -mean(sand_dat,1)), [], [],freqs, fs);
    allps_sand(itr,:,:) = p';
    clear sand_dat
    disp(['Done with trial ' num2str(itr) ' out of ' num2str(size(SourceTrialData.trial,2))])
end
% save spectra
if ~exist([datdir 'PSDs'])
    mkdir([datdir 'PSDs'])
end
save([datdir 'PSDs' ff 'CompVar_source_specs_' exmpl_sub], 'allps_sand',...
     '-v7.3')
     
 %% Parcellate 
% read atlas for parcellation
brainnetome = ft_read_atlas('template/atlas/brainnetome/BNA_MPM_thr25_1.25mm.nii')
 
% source parcellate data based on atlas
cfg.template = brainnetome;
parc_source = ft_sourceparcellate(cfg, source_atlas_intp, brainnetome);
 
% plot source plot based on the parcellated data
ft_sourceplot(cfg,parc_source, brainnetome)

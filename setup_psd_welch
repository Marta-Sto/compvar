function setup_psd_welch()
%SETUP_PSD_WELCH Function that sets up the configurations to run the script
%                across subjects on the remote TARDIS server.
clc
clear all

%% For TARDIS only

% set basepath
basepath = '/home/mpib/stojanovic/';

% add relevant paths
addpath(basepath, 'fieldtrip-20220104/'); % fieldtrip
addpath(basepath, 'qsub_tardis_slurmpreview/');
addpath(genpath('/home/mpib/stojanovic/megconnectome-master/'));

ft_defaults()

% basic paths for MEG
MODIN   = fullfile(basepath, 'SOURCEDATA/'); % folder with subject MEG files (sync files to MEG_to_use)
MODOUT  = fullfile(basepath,'PSDDATA/'); % folder for output files
ATLAS   = fullfile(basepath, 'BrainnetomeAtlasViewer-2/'); % atlas

backend = 'slurm';
compile = 'no';
overwrite = 1;

% specify resource allocation on TARDIS
stack = 1;
timreq = 240;       % in minutes per run
memreq = 20*1024^3; % 50 GB

%check if dir exists and, if not, create it
checkdir = exist(MODOUT); % returns 7 if dir is an existing folder
                          % only set up directory if it isn't already one
if checkdir ~= 7
     mkdir(MODOUT) % set up dir if 7 is not returned
end

%% List HCP subjects
% check data before running the function
sub = {'100307'; '102816'; '105923'; '106521'; '108323'; '109123'; '112920'; '113922'};
   
%% Make configurations (cfg) list
% initialise configurations per subject
% configurations are based on what's different between subjects
for isub = 1:length(sub)
    
    % check whether it's better to put this here or before the loop
    % might skip over the folders that don't have the appropriate data
    
    cfg         = [];
    cfglist     = {};
    cfg.MODIN   = MODIN; % input
    cfg.MODOUT  = MODOUT; % output
    cfg.ATLAS   = ATLAS;
    % cfg.MRI     = MRI;
    
    ff = filesep; % file seperator (different for Mac or Windows)
    
    subfolder  = [MODIN sub{isub} ff 'Restin' ff 'rmegpreproc'];
    restfile   = [subfolder ff [sub{isub} '_' 'MEG_3-Restin_rmegpreproc.mat']];
    anatfolder = [MODIN sub{isub} ff 'anatomy'];
    anatfile   = [anatfolder ff [sub{isub} '_' 'MEG_anatomy_transform.txt']];
    headfile   = [anatfolder ff [sub{isub} '_' 'MEG_anatomy_headmodel.mat']]; % head model
    smodfile   = [anatfolder ff [sub{isub} '_' 'MEG_anatomy_sourcemodel_3d8mm.mat']]; % source model
    % mrifile    = [anatfolder ff 'T1w_acpc_dc_restore.nii.gz'];
    atlasfile  = [basepath,'BNA_MPM_thr25_1.25mm.nii']; 
    
    cfg.restfile = restfile;  % input
    cfg.outfile  = [MODOUT sub{isub} 'source_parcel.mat']; % output
    cfg.anatfile = anatfile;  % anatomy
    cfg.headmod  = headfile;  % headmodel
    cfg.smod     = smodfile;  % sourcemodel
    % cfg.fmri   = mrifile;   % fmri
    cfg.atlas    = atlasfile; % atlas
    cfg.subjno   = sub(isub); % subject number
    
    if ~exist(cfg.outfile, 'file') || overwrite
        cfglist = [cfglist cfg];
    end
end

%% Shuffle configurations and check
% shuffle list of configurations to run
cfglist = cfglist(randsample(length(cfglist),length(cfglist)));

% print out the number of data files
fprintf('The source estimation for %d subject(s)\n', length(cfglist))

if strcmp(backend, 'slurm')
    options = '-D. -c5'; % --gres=gpu:1 % c refers to number of CPUs requested
else
    options =  '-l nodes=1:ppn=3';
end

% check the directory
mkdir('~/qsub'); cd('~/qsub');

%% Run source estimation on parcellated data
% compile the function to be executed in a batch on the server
% run function has to live in the same folder as the setup to work
if strcmp(compile, 'yes')
    fun2run = qsubcompile({@psd_welch}, 'toolbox', {'signal', 'stats'}); 
else
    fun2run = @psd_welch;    % fun2run takes all prior inputs and returns 
                             % the parcellated source estimation per subject                                   
end 

if strcmp(backend, 'local')
    cellfun(fun2run, cfglist)
    return
end

% prepare job list, where qsubcellfun applies the source script to each element of a cell array
qsubcellfun(fun2run, cfglist, 'memreq', memreq, 'timreq', timreq*60, 'stack', stack, ...
    'StopOnError', true, 'backend', backend, 'options', options);

end

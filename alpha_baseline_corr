%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                 %%%% SOURCE PROJECTION MAIN ROUTINE %%%% 

   %%%% routine for loading resting-state data per example subject %%%%


%% add fieldtrip and relevant paths 

% add fieldtrip
fieldtrip_dir = '/Users/stojanovic/Documents/Projects/MaxPlanck/Toolboxes/fieldtrip-20220104/';
% update to a new Fieldtrip version, Nov 2022
% can check if anything has been changed - virtual channel function

addpath(fieldtrip_dir)

ft_defaults

% also add megconnectome functions
addpath(genpath('/Volumes/LNDG/Projects/HCP/megconnectome-master/'));


%% load relevant data per subject

rootdir = '/Volumes/LNDG/Projects/HCP/';
ff = filesep; % depends on operating system (e.g., in this case Mac)

megdir = [rootdir 'Sourceproject' ff 'MEG' ff];
subs_avail = dir(megdir);

exmpl_sub = subs_avail(8).name; % can load across subjects with cfgs
datdir = [megdir exmpl_sub ff];

% load resting-state data
fname = dir([datdir ff 'Rest*' ff 'rmeg*' ff exmpl_sub '*MEG_3' '*.mat']);
load([fname.folder ff fname.name])

% get transformation matrix for subject
hcp_read_ascii([datdir 'anatomy' ff exmpl_sub '_MEG_anatomy_transform.txt']);
T = transform.bti2spm;

% load headmodel, convert to milimiters
headmod = dir([datdir 'an*' ff exmpl_sub '*headmodel.mat']);
tmp = load([headmod.folder  ff headmod.name]);
hm = tmp.headmodel;
hm = ft_convert_units(hm, 'mm');

% load source model, also convert to milimiters
smod = dir([datdir 'an*' ff exmpl_sub '*source*' '3d6mm*' '.mat']);
tmp = load([smod.folder  ff smod.name]);
sm = tmp.sourcemodel3d;
sm = ft_convert_units(sm, 'mm');

% make the coordinate system of the original source model mni
sm.coordsys = 'mni';

disp('All subject data loaded');


%% filter data

% the raw data here also contains trial information
cfg  = [];
cfg.bpfilter = 'yes';
cfg.bpfreq   = [1 80];
data = ft_preprocessing(cfg, data);
disp('Raw data filtered');


%% redefine trial length and preprocess

% cfg = [];
% cfg.trials = 'all';
% cfg.length = 10;
% data = ft_redefinetrial(cfg,data);

cfg = [];
cfg.dataset = '/Volumes/FB-LIP/LNDG/Projects/HCP/Sourceproject/MEG/105923/Restin/rmegpreproc/105923_MEG_3-Restin_rmegpreproc.mat';
cfg.trialdef.length = 10;
rdata = ft_definetrial(cfg);


% preprocess with the redefined trials to 10 seconds
cfg = [];
cfg.trl  = rdata.trl;
cfg.datafile = rdata.datafile;
cfg.headerfile = rdata.headerfile;
rdata = ft_preprocessing(cfg);


%% get covariance

cfg = [];
cfg.preproc.demean = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
tlck = ft_timelockanalysis(cfg, data); % preprocess with the shorter 2-second trials
disp('Timelock complete');


%% tlck of all trials

cfg = [];
cfg.preproc.demean         = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
cfg.keeptrials = 'yes';
tlck_all       = ft_timelockanalysis(cfg, data);
disp('Timelock of all trials complete');


%% load atlas

bnm_atlas = ft_read_atlas([fieldtrip_dir '/template/atlas/brainnetome/BNA_MPM_thr25_1.25mm.nii']); % brainnetome
aal_atlas = ft_read_atlas([fieldtrip_dir 'template/atlas/aal/ROI_MNI_V4.nii']); %AAL
disp('Atlas loaded');


%% transform source and headmodels with subject transformation matrix

sm_trans = ft_transform_geometry(T, sm);
sm_trans.coordsys = 'mni';

hm_trans = ft_transform_geometry(T, hm);
hm_trans.coordsys = 'mni';
disp('Head and source models transformed');


%% load mri

% navigate to relevant subject anatomy folder by hand
% can also be loaded another way - when cfgs are used

mri = ft_read_mri('T1w_acpc_dc_restore.nii.gz'); 
mri.coordsys = 'mni';
disp('Subject-specific MRI loaded');


%% create sourcemodel to use 

% create sourcemodel based on subject sourcemodel and the subject MRI
cfg             = [];
cfg.warpmni     = 'yes';
cfg.inwardshift = -20; % set this to expand the grid outwards/the area
                       % the functional data covers
% cfg.moveinward = -100;
cfg.method      = 'basedonmri';
% cfg.method    = 'basedonpos';
% cfg.sourcemodel.pos = sm.pos;
% cfg.sourcemodel.inside = sm.inside;
cfg.unit      = 'mm';
cfg.template  = sm;
cfg.nonlinear = 'yes'; % use non-linear normalization
cfg.mri       = mri;
cfg.headmodel = hm;
cfg.coordsys  = 'mni';
sourcemodel_to_use  = ft_prepare_sourcemodel(cfg);
disp('Sourcemodel created');


%% create mask based on prepared sourcemodel

cfg = [];
cfg.atlas      = atlas;
cfg.roi        = atlas.tissuelabel; % here can specify a single label, i.e. single ROI
cfg.inputcoord = 'mni';
% mask = ft_volumelookup(cfg,sourcemodel_to_use);
mask           = ft_volumelookup(cfg,sm_trans);

% determine inside positions
sm_trans.inside          = false(sm_trans.dim);
sm_trans.inside(mask==1) = true;
% sourcemodel_to_use.inside  = false(sourcemodel_to_use.dim);
% sourcemodel_to_use.inside(mask==1) = true;

% plot the atlas based grid
figure; ft_plot_mesh(sm_trans.pos(sm_trans.inside,:));


%% visualise the sourcemodel on the headmodel

% check for alignment between source and headmodel
figure; hold on     % plot all objects in one figure
ft_plot_headmodel(hm, 'facecolor','cortex','edgecolor','none'); alpha 0.5; camlight;   
alpha 0.4           % make the surface transparent
ft_plot_mesh(sourcemodel_to_use.pos(sourcemodel_to_use.inside,:));

% ft_plot_mesh(sm_trans.pos(sm_trans.inside,:));

%% generate leadfield based on sourcemodel_to_use

cfg                = [];
cfg.channel        = tlck_all.label;
cfg.grad           = tlck_all.grad;
cfg.normalizeparam = 1;
cfg.sourcemodel    = sourcemodel_to_use;
% cfg.headmodel      = hm_trans;
cfg.headmodel      = hm;
cfg.reducerank     = 2;
cfg.normalize      = 'yes';
lf_meg             = ft_prepare_leadfield(cfg);
disp('Leadfield prepared');


%% visualise leadfield

selchan = match_str(data.grad.label,lf_meg.label);
%selpos1 = find(lf_meg.inside, 1, 'first');
selpos = find(lf_meg.inside, 1, 'last');

figure
subplot(1,3,1); ft_plot_topo3d(data.grad.chanpos(selchan,:), lf_meg.leadfield{selpos}(:,1));
subplot(1,3,2); ft_plot_topo3d(data.grad.chanpos(selchan,:), lf_meg.leadfield{selpos}(:,2));
subplot(1,3,3); ft_plot_topo3d(data.grad.chanpos(selchan,:), lf_meg.leadfield{selpos}(:,3));


%% get reg kappa and run beamformer (LCMV)

[u,s,v] = svd(((tlck.cov))); % has to be tlck because 'cov' has to be 2D
d       = -diff(log10(diag(s)));
d       = d./std(d);
kappa   = find(d>5,1,'first');


%% run source analysis 

cfg             = [];
cfg.lcmv.lambda = '5%';
cfg.lcmv.kappa  = kappa;
cfg.method          = 'lcmv';
cfg.lcmv.keepfilter = 'yes';
cfg.lcmv.fixedori   = 'yes';
% cfg.lcmv.weightnorm = 'unitnoisegain';
cfg.lcmv.weightnorm = 'nai'; % minimise the centre of the head bias using 
                             % neural activity index
% cfg.headmodel     = hm_trans;
cfg.headmodel       = hm;
cfg.sourcemodel     = lf_meg;
% cfg.sourcemodel.pos = 'pos';
source_avg          = ft_sourceanalysis(cfg,tlck_all);
disp('Completed source averaging');


%% project single trials
 
 % build empty structure for source data
 clear SourceTrialData
 SourceTrialData.trial = cell(1,length(rdata.trial));
 SourceTrialData.label = cell(1,1);
 %SourceTrialData.trialinfo = data.trialinfo;
 SourceTrialData.fsample   = rdata.fsample;
 SourceTrialData.time      = rdata.time;
 NTrials = length(rdata.trial);

 % get trafo-matrix 
 InVox       = source_avg.inside;
 TrafoMatrix = permute(squeeze(cat(3,source_avg.avg.filter{InVox})),[ 2 1]);

 % get labels right
 SourceTrialData.label = [];
 for vx = 1:length(find(InVox == 1))
     SourceTrialData.label{vx,1} = strcat('VirtCH', num2str(vx));
 end

 % source-project single trials
 for tr = 1:NTrials
     display(['Projecting trial ' num2str(tr)])
     SourceTrialData.trial{tr}(:,:) = TrafoMatrix(:,:)*rdata.trial{tr};
 end
 disp('Done source projecting single trials');


%% get alpha power

% complete frequency analysis on single trial source data
cfg         = [];
cfg.method  = 'mtmfft';
cfg.taper   = 'hanning';
%cfg.toi    = 0:5:2;
cfg.foi     = 8:1:12;
%cfg.t_ftimwin = 4./cfg.foi;
cfg.output  = 'pow';
cfg.tapsmofrq  = 2;
cfg.keeptrials = 'yes';
cfg.pad        = 'nextpow2';
trlwise_pow    = ft_freqanalysis(cfg,SourceTrialData);


% average over alpha frequency data
cfg             = [];
cfg.frequency   = [8,12];
cfg.avgoverfreq = 'yes';
cfg.avgoverrpt  = 'yes';
alpha_data      = ft_selectdata(cfg,trlwise_pow);
% can also try to replace with ft_freqdescriptives
disp('Done getting alpha power');


%% baseline correct alpha power

% done on 10-second trials

% create dummy struct with the power over trials
clear baselinedummy;
baselinedummy            = trlwise_pow;
baselinedummy.dimord     = 'chan_freq_time';
baselinedummy.time       = (cell2mat(SourceTrialData.time))';


% run freq baseline
cfg              = [];
% cfg.baseline     = [0,0.0020];
% cfg.baseline   = 'all';
cfg.baseline     = [0,0.0098]; % last value that it accepts
cfg.baselinetype = 'db';
cfg.parameter    = 'powspctrm';
baseline_anal    = ft_freqbaseline(cfg, baselinedummy);


% average over alpha frequency data
cfg             = [];
cfg.frequency   = [8,12];
cfg.avgoverfreq = 'yes';
cfg.avgoverrpt  = 'yes';
base_alpha_data      = ft_selectdata(cfg,baseline_anal);
% can also try to replace with ft_freqdescriptives
disp('Done getting alpha power');


%% create dummy struct

% clear dummy_source;
% activation        = base_alpha_data.powspctrm; % use alpha activity
% dummy_source      = source_avg;
% dummy_source.avg.pow(dummy_source.inside) = activation;
% dummy_source.time = 0;
% disp('Done creating dummy');


%% create dummy struct

% check whether it makes sense to restructure it like so by hand
clear base_dummy_source;
base_dummy_source.pow  = base_alpha_data.powspctrm;
base_dummy_source.time = 0;
base_dummy_source.cfg  = source_avg.cfg; % check whether this would work
base_dummy_source.dim  = source_avg.dim;
base_dummy_source.avg  = source_avg.avg;
base_dummy_source.pos  = source_avg.pos;
base_dummy_source.inside  = source_avg.inside;
disp('Done creating dummy');


%% transform coordinates of dummy source struct

dummy_source_trans = ft_transform_geometry(T,base_dummy_source);
disp('Done creating transformed dummy');


%% plot source data onto subject mri as a quick check

% volume reslice the mri data
cfg          = [];
mri_resliced = ft_volumereslice(cfg, mri);

% interpolate the source data onto the mri
cfg            = [];
cfg.downsample = 2;
cfg.parameter  = 'pow';
source_mri     = ft_sourceinterpolate(cfg, source_avg, mri_resliced);
% source_mri     = ft_sourceinterpolate(cfg, dummy_source, mri);
source_mri     = ft_sourceinterpolate(cfg, dummy_source_trans, mri_resliced);


% spatially normalize the anatomy and functional data to MNI coordinates
cfg                = [];
cfg.nonlinear      = 'no';
source_mri_plot    = ft_volumenormalise(cfg, source_mri);
source_mri_plot.coordsys = 'mni';


% plot multiple 2D axial slices
cfg               = [];
cfg.method        = 'ortho';
cfg.method        = 'surface';
% cfg.method      = 'slice';
cfg.funparameter  = 'pow';
cfg.maskparameter = cfg.funparameter;
% cfg.maskparameter = mask;
% cfg.funcolorlim   = [0.0 1.2];
cfg.opacitylim    = [0.0 1.2];
cfg.opacitymap    = 'rampup';
ft_sourceplot(cfg, source_mri_plot);


%% interpolate atlas

% make the atlas low resolution, interpolated with alpha activity
cfg              = [];
cfg.parameter    = 'all';
cfg.interpmethod = 'nearest';
intp_atlas_up    = ft_sourceinterpolate(cfg,dummy_source_trans,atlas);
intp_atlas       = ft_sourceinterpolate(cfg,atlas,dummy_source_trans); 
% if the atlas is interpolated with the source the other way around, it is upscaled
% however, both methods seem to generate a similar plot
intp_atlas_up.coordsys = 'mni';
intp_atlas.coordsys    = 'mni';
disp('Source activity interpolated with atlas');


%% reshape fields of structure by hand 

% this shows the activity plotted onto the atlas regions
n_lgth             = size(dummy_source_trans.inside,1)*size(dummy_source_trans.inside,2)*...
                     size(dummy_source_trans.inside,3);
source_plot        = intp_atlas;
% source_plot      = intp_atlas_up;
source_plot.inside = reshape(dummy_source_trans.inside,[n_lgth,1]);
source_plot.pow    = reshape(dummy_source_trans.avg.pow,[n_lgth,1]);
source_plot.eta    = reshape(dummy_source_trans.avg.eta,[n_lgth,1]);
source_plot        = rmfield(source_plot,'coordsys');


%% plot average alpha power

% plot average source alpha activity
% still plots as only a single value
cfg              = [];
cfg.method       = 'surface';
cfg.anaparameter = 'tissue';
cfg.funparameter = 'pow';
cfg.projmethod   = 'project';
%cfg.renderer    = 'opengl';
cfg.sphereradius = 1;
cfg.camlight       = 'yes';
cfg.interactive    = 'yes';
cfg.funcolormap    = 'jet';
cfg.funcolorlim    = [0.0 1.2];
cfg.opacitylim     = [0.0 1.2];
cfg.opacitymap     = 'rampup';
ft_sourceplot(cfg,source_plot); % view from the left
% ft_sourceplot(cfg,intp_atlas_up); % high res atlas
% ft_sourceplot(cfg,dummy_source_trans,intp_atlas); % low res atlas

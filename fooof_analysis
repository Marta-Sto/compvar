#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 21 23:35:58 2023

Script that runs FOOOF analysis across subjects. Loads PSD estimates
and associated frequencies per subject from the output of pwelch.

@author: stojanovic

"""
# Import relevant packages
import numpy as np
import scipy.io as spio
from fooof import FOOOFGroup

# List relevant subjects
# Download rest and re-run when I do
#subjects   = ['100307','102816','105923','106521','108323','109123','112920','113922']
subjects = ['109123']

# Create a FOOOFGroup object to fit power spectra across all subjects
fg = FOOOFGroup(peak_width_limits = [3,7], min_peak_height = 0.05, max_n_peaks = 8)


for s in range(0, np.size(subjects)):
    
    sub = subjects[s]
    
    # Define directory for input subject data
   # sub_dir = '/home/mpib/stojanovic/PSDDATA/'
    sub_dir  = '/Users/stojanovic/Documents/Projects/MaxPlanck/Data/'

    # Define directory to save the FOOOF results
    # out_dir = '/home/mpib/stojanovic/PSDDATA/fooof_data/'
    
    psd_file   = sub_dir + 'CompVar_allpsds_' + str(sub) + '.mat'
    freqs_file = sub_dir + 'CompVar_fs_' + str(sub) + '.mat'

    psds  = spio.loadmat(psd_file,  mdict = None, mat_dtype = True, struct_as_record = False)
    freqs = spio.loadmat(freqs_file,mdict = None, mat_dtype = True, struct_as_record = False)
    
    psds  = psds['allps_sand_parc'].T
    freqs = freqs['f']
    
    
    # Define the frequency range
    freq_range      = [2,40] # could also change to 2 Hz

    # Initialize input arrays
    exps_array      = np.empty((246,np.size(psds,0)))
    offset_array    = np.empty((246,np.size(psds,0)))
    r_squared_array = np.empty((246,np.size(psds,0)))
        
    osc_peaks_list  = list()


    for t in range(1,np.size(psds,1)):
        
        # The loaded data may contain extra dimensions, so might need to flatten
        #freqs = np.asarray(np.squeeze(freqs))
    
        print('Shape of psds array:', psds.shape)
        print('Shape of freqs array:', freqs.shape)
        
            
        if np.isnan(psds[1,1]):
            freqs = np.linspace(1,246, num = np.size(psds,1))
            exps_array[:,t] = np.NaN
            offset_array[:,t] = np.NaN
            peak_nan = np.empty((8,1))
            peak_nan[:] = np.NaN
            osc_peaks = list(peak_nan)
            osc_peaks_list.append(osc_peaks)
            r_squared_array[t,:] = np.NaN
        
        else:
            freqs = np.linspace(1,246, num = np.size(psds,1))
            #psds  = np.asarray(np.squeeze(psds[1,:]),dtype=float)
            #psds   = np.asarray(psds[1,:],dtype=float)
            psds   = np.asarray(psds,dtype=float)
            print('Size of psds array:', psds.shape)
            print('Size of freqs array:', freqs.shape)
            
            # using -1 can significantly speed up the fitting process
            # as it refers to the number of cpus that the job will use
            fg1 = fg.fit(freqs, psds, freq_range, n_jobs=1)
            exps_temp = fg.get_params('aperiodic_params','exponent')
            exps_array[t,:] = exps_temp
            print('Shape of exps array:', offset_array.shape)
            offset_temp = fg.get_params('aperiodic_params','offset')
            offset_array[t,:] = offset_temp
            print('Shape of offset array:', offset_array.shape)
            peaks_temp = list(fg.get_params('peak_params'))
            osc_peaks = peaks_temp
            osc_peaks_list.append(osc_peaks) # check why this isn't working
            r_squ_temp =fg.get_params('r_squared')
            r_squared_array[t,:] = r_squ_temp
            print('Shape of r squared array:', r_squared_array.shape)
              
    # Save data per subject
    all_dat                 = {}
    all_dat['slopes']       = exps_array
    all_dat['oscillations'] = osc_peaks_list
    all_dat['offset']       = offset_array
    all_dat['rsquared']     = r_squared_array
    
    # save data into the appropriate directory
    # savname = out_dir + 'CompVar_fooof_results_sub_' + str(sub) + '.mat'
    
    # says no such directory name, but the point is to create it
    savname = sub_dir + 'CompVar_fooof_parc_results_' + str(sub) + '.mat'
    print('Done running and saving FOOOF over spectra')
    
    spio.savemat(savname, all_dat)
    
    del all_dat 

function single_trial_source_parcellate(cfg)
% Takes preprocessed HCP MEG data and returns the source
% estimates and source projected data.

% Parcellation obtained based on the Brainnetome atlas.

% To generate activity and power estimates for parcels based on the atlas, 
% the following steps are conducted:
% 1) read the preprocessed HCP MEG data, 
% 2) read the headmodel and the source model, 
% 3) filter
% 4) generate a leadfield, 
% 5) project single trials,
% 6) interpolate and normalize the data, 
% 7) visualise the source projected data, and finally
% 8) obtain estimates of activity per parcel (and save this data).

%% pass cfg list

% set up configurations
restfile   = cfg.restfile; 
anatfile   = cfg.anatfile;
headfile   = cfg.headmod;
smodfile   = cfg.smod;
atlasfile  = cfg.atlas;   
subjno     = cfg.subjno;

disp(cfg.MODIN);
cd(cfg.MODOUT);

%% load data, headmodel and sourcemodel 

% data per subject 
load(restfile);

% transformation matrix per subject
tmat = hcp_read_ascii(anatfile); 
T = tmat.transform.bti2spm;

% head model 
tmp = load(headfile);
hm = tmp.headmodel;
hm = ft_convert_units(hm, 'mm');

% source model
tmp = load(smodfile);
sm = tmp.sourcemodel3d;
sm = ft_convert_units(sm, 'mm');
disp('Headmodel and sourcemodel ready');

%% filter

cfg = [];
cfg.bpfilter = 'yes';
cfg.bpfreq = [1 80];
data = ft_preprocessing(cfg, data);
disp('Done with filtering');

%% get covariance

cfg = [];
cfg.preproc.demean = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
tlck = ft_timelockanalysis(cfg, data);
disp('Done with initial timelock');

%% tlck of all trials

cfg = [];
cfg.preproc.demean = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
cfg.keeptrials = 'yes';
tlck_all = ft_timelockanalysis(cfg, data);
disp('Done with timelock of all trials');

%% generate leadfield

cfg             = [];
cfg.channel     = tlck.label;
cfg.grad        = tlck.grad;
cfg.normalizeparam = 1;
cfg.sourcemodel = sm;
cfg.headmodel   = hm;
cfg.reducerank = 2;
cfg.normalize = 'yes';
lf_meg   = ft_prepare_leadfield(cfg);
disp('Leadfield ready');
lf_meg_trans = ft_transform_geometry(T, lf_meg);
disp('Leadfield transformed');

%% get reg kappa and run beamformer (LCMV)

[u,s,v] = svd(((tlck.cov)));
d       = -diff(log10(diag(s)));
d       = d./std(d);
kappa   = find(d>5,1,'first');

%% filter

cfg = [];
cfg.bpfilter = 'yes';
cfg.bpfreq = [1 80];
data = ft_preprocessing(cfg, data);

%% get covariance

cfg = [];
cfg.preproc.demean         = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance             = 'yes';
tlck = ft_timelockanalysis(cfg, data);

%% tlck of all trials

cfg = [];
cfg.preproc.demean         = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
cfg.keeptrials = 'yes';
tlck_all = ft_timelockanalysis(cfg, data);

%% generate leadfield

cfg             = [];
cfg.channel     = tlck.label;
cfg.grad        = tlck.grad;
cfg.normalizeparam = 1;
cfg.sourcemodel = sm;
cfg.headmodel   = hm;
cfg.reducerank = 2;
cfg.normalize = 'yes';
lf_meg   = ft_prepare_leadfield(cfg);
lf_meg_trans = ft_transform_geometry(T, lf_meg);
 
%% also transform headmodel
% transform headmodel

hm_trans = ft_transform_geometry(T, hm);
disp('Headmodel transformed');

%% get reg kappa and run beamformer (LCMV)

[u,s,v] = svd(((tlck.cov)));
d       = -diff(log10(diag(s)));
d       = d./std(d);
kappa   = find(d>5,1,'first');

cfg             = [];
cfg.lcmv.lambda = '5%';
cfg.lcmv.kappa = kappa;
cfg.method          = 'lcmv';
cfg.lcmv.keepfilter = 'yes';
cfg.lcmv.fixedori   = 'yes';
cfg.lcmv.weightnorm = 'unitnoisegain';
cfg.headmodel   = hm_trans;
cfg.sourcemodel = lf_meg_trans;
source_avg      = ft_sourceanalysis(cfg, tlck);

%% make atlas 

% load atlas
brainnetome = ft_read_atlas(atlasfile);

cfg = [];
cfg.parameter = 'all';
cfg.interpmethod = 'nearest';
atlas_lowres = ft_sourceinterpolate(cfg, brainnetome, source_avg);
atlas_lowres.pos = source_avg.pos;

%% parcellate single trials

cfg = [];
% cfg.method = 'svd';
cfg.method   = 'pca';
cfg.parcellation = 'tissue';
% svd_parc_trls = ft_virtualchannel(cfg, tlck_all, source_avg, atlas_lowres);
pca_parc_trls = ft_virtualchannel(cfg, tlck_all, source_avg, atlas_lowres);

%% save data 

ff = filesep; 

disp('Saving parcellated source data')

% save(['/home/mpib/stojanovic/SOURCEDATA/SVD' ff cell2mat(subjno) '_pca_parcellated_source_data'], 'svd_parc_trls',...
        % '-V7.3')
    
save(['/home/mpib/stojanovic/SOURCEDATA/PCA' ff cell2mat(subjno) '_pca_parcellated_source_data'], 'pca_parc_trls',...
        '-V7.3')

% concatenate data across subjects (for intra- comparisons, not relevant
% for inter-subject comparisons)
% save(['/home/mpib/stojanovic/SOURCEDATA/PCA' ff 'allsubs_pca_sp_data'], 'pca_parc_trls', -append, -nocompression,...
        % '-V7.3')

end 

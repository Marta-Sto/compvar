
% add fieldtrip
fieldtrip_dir = '/Users/stojanovic/Documents/Projects/MaxPlanck/Toolboxes/fieldtrip-20220104/';
addpath(fieldtrip_dir)
ft_defaults

% also add megconnectome functions
addpath(genpath('/Volumes/LNDG/Projects/HCP/megconnectome-master/'));
rootdir = '/Volumes/FB-LIP/LNDG/Projects/HCP/Sourceproject/';

% get filesep depending on OS
ff = filesep;

megdir = [rootdir 'MEG' ff];
subs_avail = dir(megdir);

% as so often, dir will  also report on some not really present files.
% -->Always important to check subs_avail before looping through names.

% Example participant:
exmpl_sub = subs_avail(5).name;
datdir = [megdir exmpl_sub ff];

% load some resting state MEG data, eyes open (4 & 5 are the following scans)
fname = dir([datdir ff 'Rest*' ff 'rmeg*' ff exmpl_sub '*MEG_3' '*.mat']);
load([fname.folder ff fname.name])

% load headmodel, convert to milimiters (maybe useful later)
headmod = dir([datdir 'an*' ff exmpl_sub '*headmodel.mat']);
tmp = load([headmod.folder  ff headmod.name]);
hm = tmp.headmodel;
hm = ft_convert_units(hm, 'mm');

% note that this is not exactly like in the tutorial. I tried to use
% subject specific head models here but you could try and use the standard
% one like suggested in the tutorial.
% can also play around with transforming the head- and
% sourcemodels at a later point and not early on here.

% load atlas
% atlas = ft_read_atlas([fieldtrip_dir
% '/template/atlas/brainnetome/BNA_MPM_thr25_1.25mm.nii']); % brainnetome
atlas = ft_read_atlas([fieldtrip_dir 'template/atlas/aal/ROI_MNI_V4.nii']); %AAL

% load source model
smod = dir([datdir 'an*' ff exmpl_sub '*source*' '3d8*' '.mat']);
tmp = load([smod.folder  ff smod.name]);
sm = tmp.sourcemodel3d;
sm = ft_convert_units(sm, 'mm');

%% filter data from restfile

% note that we probably would not do this for task data and certianly would
% use a different filter for any event-related design. Here, this might be
% fine.

cfg = [];
cfg.bpfilter = 'yes';
cfg.bpfreq = [1 80];
data = ft_preprocessing(cfg, data);

%% create template source model

% without transformation first
cfg = [];
cfg.xgrid  = -20:1:20;
cfg.ygrid  = -20:1:20;
cfg.zgrid  = -20:1:20;
cfg.unit   = 'cm';
cfg.tight  = 'yes';
cfg.inwardshift = -1.5;
cfg.headmodel   = hm;
template_grid   = ft_prepare_sourcemodel(cfg);
template_grid.coordsys = 'mni';
template_grid = ft_convert_units(template_grid,'cm');
disp('Headmodel and sourcemodel ready');

% plot the grid aligned to the headmodel
figure;
hold on
ft_plot_mesh(template_grid.pos(template_grid.inside,:));
ft_plot_headmodel(hm_trans,  'facecolor', 'cortex', 'edgecolor', 'none');
ft_plot_axes(hm);
alpha 0.5
camlight

%% apply transformation 

% get transformation matrix for given subject
% can also play around with applying the transformation later on
hcp_read_ascii([datdir 'anatomy' ff exmpl_sub '_MEG_anatomy_transform.txt'])
T = transform.bti2spm;

% apply transformations to headmodel and sourcemodel
hm_trans = ft_transform_geometry(T, hm);
hm_trans.coordsys = 'mni';

sm_trans = ft_transform_geometry(T, sm);
sm_trans.coordsys = 'mni';

%% apply atlas

cfg = [];
cfg.atlas      = atlas;
cfg.roi        = atlas.tissuelabel;  % here you can also specify a single label, i.e. single ROI
cfg.inputcoord = 'mni';
% mask           = ft_volumelookup(cfg, sm_trans);
mask = ft_volumelookup(cfg,template_grid);

tmp                  = repmat(template_grid.inside,1,1);
tmp(tmp==1)          = 0;
tmp(mask)            = 1;

% define inside locations according to the atlas based mask
template_grid.inside = tmp;

% plot the atlas based grid
figure; ft_plot_mesh(template_grid.pos(template_grid.inside,:));

% determine inside positions
sm_trans.inside = false(sm_trans.dim);
sm_trans.inside(mask==1) = true;

%% plot template grid

figure;
ft_plot_mesh(sm_trans.pos(sm_trans.inside,:));

%% load mri

mri = ft_read_mri([datdir 'anatomy' ff 'T1w_acpc_dc_restore.nii.gz']);
% mri = ft_read_mri('T1w_acpc_dc_restore.nii.gz'); % navigating to folder
% by hand
mri.coordsys = 'mni';

%% create sourcemodel to use 

cfg           = [];
cfg.warpmni   = 'yes';
cfg.template  = sm_trans;
cfg.nonlinear = 'yes'; % use non-linear normalization
cfg.mri       = mri;
cfg.coordsys  = 'mni';
sourcemodel_to_use  = ft_prepare_sourcemodel(cfg);

%% plot sourcemodel on headmodel

% hm = ft_convert_units(hm, 'm');
% sourcemodel_to_use = ft_convert_units(sourcemodel_to_use, 'm');

figure; hold on     % plot all objects in one figure
ft_plot_headmodel(hm_trans, 'facecolor','cortex','edgecolor','none'); alpha 0.5; %camlight;   
alpha 0.4 % make the surface transparent

ft_plot_mesh(sourcemodel_to_use.pos(sourcemodel_to_use.inside,:));

%% generate leadfield

cfg             = [];
cfg.channel     = tlck.label;
cfg.grad        = tlck.grad;
cfg.normalizeparam = 1;
cfg.method      = 'basedonmri';
cfg.sourcemodel = sourcemodel_to_use;
cfg.headmodel   = hm_trans;
cfg.reducerank  = 2; % the default for MEG
cfg.normalize   = 'yes';
cfg.grid        = sourcemodel_to_use;
lf_meg          = ft_prepare_leadfield(cfg);
lf_meg_trans    = ft_transform_geometry(T, lf_meg);

%% get covariance

cfg = [];
cfg.preproc.demean = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
tlck = ft_timelockanalysis(cfg, data);

%% tlck of all trials

cfg = [];
cfg.preproc.demean = 'yes';
cfg.preproc.baselinewindow = 'all';
cfg.covariance = 'yes';
cfg.keeptrials = 'yes';
tlck_all = ft_timelockanalysis(cfg, data);

%% get reg kappa and run beamformer (LCMV)

[u,s,v] = svd(((tlck.cov)));
d       = -diff(log10(diag(s)));
d       = d./std(d);
kappa   = find(d>5,1,'first');

cfg                 = [];
cfg.lcmv.lambda = '5%';
cfg.lcmv.kappa = kappa;
cfg.method          = 'lcmv';
cfg.lcmv.keepfilter = 'yes';
cfg.lcmv.fixedori   = 'yes';
cfg.lcmv.weightnorm = 'unitnoisegain';
cfg.headmodel   = hm_trans;
cfg.sourcemodel = sourcemodel_to_use;
source_avg      = ft_sourceanalysis(cfg, tlck);

%% make atlas low res

cfg = [];
cfg.parameter = 'all';
cfg.interpmethod = 'nearest';
atlas_lowres = ft_sourceinterpolate(cfg, atlas, source_avg);
atlas_lowres.pos = source_avg.pos;
atlas_lowres.coordsys = 'mni';

%% plot source interpolated data

% done on low resolution atlas

cfg               = [];
cfg.method        = 'ortho';
cfg.funparameter  = 'pow';
cfg.location = [64 -32 8];
cfg.funcolormap = 'jet';
ft_sourceplot(cfg,atlas_lowres);

%% parcellate single trials

% what ft_sourceparcellate spits out:
% label: {1x116 cell}  % brain parcels labels
% anatomy: [116x1 double]
% anatomydimord: 'chan_unknown'
% pow: [116x1 double]% one value of brain activity per parcel
% powdimord: 'chan'
% brainordinate: [1x1 struct]
% cfg: [1x1 struct]

cfg = [];
cfg.method = 'pca'; % the number of channels in the montage is inconsistent
% matrix multiplication error with svd, and unable to access folder with dss
cfg.parcellation = 'tissue';
parc_trls = ft_virtualchannel(cfg, tlck_all, source_avg, atlas_lowres);

%% create dummy struct for subsequent plotting 

dummy=atlas;
for i=1:length(parc_trls.pow)
      dummy.tissue(find(dummy.tissue==i))=parc_trls.pow(i);
end

%% save aligned data 

ff = filesep; 
disp('Saving aligned source data')
save(['/home/mpib/stojanovic/SOURCEDATA/Alpha' ff cell2mat(subjno) '_aligned_parcellated_source_data'], 'parc_trls',...
        '-V7.3')
        
 % use ft_datatype to check data types
